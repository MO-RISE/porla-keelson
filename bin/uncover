#!/usr/bin/env python3

"""
Command line utility tool for processing input from stdin. Each line on the
input stream is expected to be a serialized, base64-encoded brefv.Envelope.
The envelope will be deserialized and the payload will be base64-encoded and
outputted to stdout together with timestamps received_at and enclosed_at.
"""

# pylint: disable=duplicate-code

import sys
import logging
import warnings
import argparse
from base64 import b64encode, b64decode

import parse
from brefv import uncover

parser = argparse.ArgumentParser()
parser.add_argument(
    "--log-level", type=lambda level: getattr(logging, level), default=logging.WARNING
)
parser.add_argument(
    "input_specification",
    type=str,
    nargs="?",
    default="{envelope}",
    help="Example: '{envelope}',"
    "See https://github.com/r1chardj0n3s/parse#format-specification",
)
parser.add_argument(
    "output_specification",
    type=str,
    nargs="?",
    default="{received_at} {enclosed_at} {payload}",
    help="Example: '{received_at} {enclosed_at} {payload}',"
    "See https://github.com/r1chardj0n3s/parse#format-specification",
)

args = parser.parse_args()

# Setup logger
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s %(message)s", level=args.log_level
)
logging.captureWarnings(True)
warnings.filterwarnings("once")

logger = logging.getLogger("uncover")

# Compile pattern
input_pattern = parse.compile(args.input_specification)

for line in sys.stdin:
    logger.debug(line)
    res = input_pattern.parse(line.rstrip())

    if not res:
        logger.error(
            "Could not parse line: %s according to the input_specification: %s",
            line,
            args.input_specification,
        )
        continue

    if not "envelope" in res.named:
        logger.error(
            "Could not find the expected named argument 'input' in the input specification: %s",
            args.input_specification,
        )
        continue

    parts = res.named

    envelope = parts.pop("envelope")
    try:
        envelope = b64decode(envelope.encode())
        received_at, enclosed_at, payload = uncover(envelope)
        payload = b64encode(payload).decode()
    except Exception:  # pylint: disable=broad-exception-caught
        logger.exception("Failed to handle envelope...")
        continue

    parts = {
        **parts,
        **{"received_at": received_at, "enclosed_at": enclosed_at, "payload": payload},
    }

    sys.stdout.write(args.output_specification.format(**parts) + "\n")
    sys.stdout.flush()
